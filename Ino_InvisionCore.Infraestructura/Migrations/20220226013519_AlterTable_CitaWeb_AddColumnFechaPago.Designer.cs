// <auto-generated />
using System;
using Ino_InvisionCore.Infraestructura.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ino_InvisionCore.Infraestructura.Migrations
{
    [DbContext(typeof(InoContext))]
    [Migration("20220226013519_AlterTable_CitaWeb_AddColumnFechaPago")]
    partial class AlterTable_CitaWeb_AddColumnFechaPago
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AccidenteDeTrabajo.AccidenteDeTrabajo", b =>
                {
                    b.Property<int>("IdRegistroAccidenteDeTrabajo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgenteAccidente_CausaAccidente");

                    b.Property<string>("AntiguedadEmpleo_Accidentado")
                        .HasMaxLength(20);

                    b.Property<string>("ApellidoMaterno_Accidentado")
                        .HasMaxLength(200);

                    b.Property<string>("ApellidoPaterno_Accidentado")
                        .HasMaxLength(200);

                    b.Property<string>("Area_Accidentado")
                        .HasMaxLength(50);

                    b.Property<string>("Area_Accidente")
                        .HasMaxLength(100);

                    b.Property<string>("CargoResponsable_RegistroInvestigacion");

                    b.Property<string>("CargoTestigo_DescripcionAccidente")
                        .HasMaxLength(100);

                    b.Property<string>("DeclaracionAfectado_DescripcionAccidente");

                    b.Property<string>("DeclaracionTestigo_DescripcionAccidente");

                    b.Property<string>("Departamento_Accidentado")
                        .HasMaxLength(50);

                    b.Property<string>("Descripcion_MedidaCorrectiva");

                    b.Property<string>("Distrito_Accidentado")
                        .HasMaxLength(50);

                    b.Property<string>("DocumentoIdentidad_DescripcionAccidente")
                        .HasMaxLength(10);

                    b.Property<string>("Domicilio_Accidentado")
                        .HasMaxLength(500);

                    b.Property<int>("Edad_Accidentado");

                    b.Property<bool>("EsActivo");

                    b.Property<bool>("EsLaborHabitual_Accidente");

                    b.Property<string>("EstadoImplementacion_MedidaCorrectiva");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<string>("FechaEjecucion_MedidaCorrectiva");

                    b.Property<DateTime>("FechaInvestigacion_Accidente");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaNacimiento_Accidentado");

                    b.Property<DateTime>("Fecha_Accidente");

                    b.Property<string>("Fecha_RegistroInvestigacion");

                    b.Property<string>("Grado_Accidente")
                        .HasMaxLength(50);

                    b.Property<string>("Gravedad_Accidente")
                        .HasMaxLength(50);

                    b.Property<string>("Hora_Accidente")
                        .HasMaxLength(10);

                    b.Property<bool>("HuboTestigos_DescripcionAccidente");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("JornadaTrabajo_Accidentado")
                        .HasMaxLength(30);

                    b.Property<string>("Jornada_Accidente")
                        .HasMaxLength(30);

                    b.Property<string>("LaborHabitual_Accidente")
                        .HasMaxLength(100);

                    b.Property<string>("Lugar_Accidente")
                        .HasMaxLength(100);

                    b.Property<string>("MecanismoFormaAccidente_CausaAccidente");

                    b.Property<string>("NombreResponsable_RegistroInvestigacion");

                    b.Property<string>("NombreTestigo_DescripcionAccidente")
                        .HasMaxLength(200);

                    b.Property<string>("Nombre_Aseguradora")
                        .HasMaxLength(500);

                    b.Property<string>("Nombres_Accidentado")
                        .HasMaxLength(200);

                    b.Property<int>("NroDiasDescanso_Accidente");

                    b.Property<int>("NroHorasTrabajadas_Accidentado");

                    b.Property<int>("NroTrabajadoresAfectados_Accidente");

                    b.Property<int>("NroTrabajadores_NoSCTR");

                    b.Property<int>("NroTrabajadores_SCTR");

                    b.Property<string>("NumeroDocumento_Accidentado")
                        .HasMaxLength(10);

                    b.Property<string>("Ocupacion_Accidentado")
                        .HasMaxLength(100);

                    b.Property<string>("ParteCuerpo_CausaAccidente");

                    b.Property<string>("Provincia_Accidentado")
                        .HasMaxLength(50);

                    b.Property<string>("Referencias_Accidentado")
                        .HasMaxLength(200);

                    b.Property<string>("Responsable_MedidaCorrectiva");

                    b.Property<string>("Sexo_Accidentado")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("TiempoExperiencia_Accidentado")
                        .HasMaxLength(20);

                    b.Property<string>("TipoDocumento_Accidentado")
                        .HasMaxLength(50);

                    b.Property<string>("TipoLesion_CausaAccidente");

                    b.Property<string>("TipoOcupacion_Accidentado")
                        .HasMaxLength(50);

                    b.Property<string>("TipoVinculacion_Accidentado")
                        .HasMaxLength(50);

                    b.HasKey("IdRegistroAccidenteDeTrabajo");

                    b.ToTable("AccidenteDeTrabajo");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Anestesia.EvaluacionPreAnestesica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AntecedentesQuirurgicosAnastesicos");

                    b.Property<string>("Cama");

                    b.Property<string>("ClasificacionASA");

                    b.Property<bool>("ClasificacionASA_Emergencia");

                    b.Property<string>("ClasificacionGOLDMAN");

                    b.Property<string>("ConclusionesRecomendaciones");

                    b.Property<string>("DiabetesMellitus_Descripcion");

                    b.Property<bool>("DiabetesMellitus_SiNo");

                    b.Property<string>("DiagnosticoPreoperatorio");

                    b.Property<string>("Dislipidemias_Descripcion");

                    b.Property<bool>("Dislipidemias_SiNo");

                    b.Property<string>("Edad");

                    b.Property<string>("EnfermedadCardiaca_Descripcion");

                    b.Property<bool>("EnfermedadCardiaca_SiNo");

                    b.Property<string>("EnfermedadNeurológica_Descripcion");

                    b.Property<bool>("EnfermedadNeurológica_SiNo");

                    b.Property<string>("EnfermedadRenal_Descripcion");

                    b.Property<bool>("EnfermedadRenal_SiNo");

                    b.Property<string>("EnfermedadRespiratoria_Descripcion");

                    b.Property<bool>("EnfermedadRespiratoria_SiNo");

                    b.Property<string>("ExamenFisico_DientesFlojos");

                    b.Property<string>("ExamenFisico_DistanciaTM");

                    b.Property<string>("ExamenFisico_FC");

                    b.Property<string>("ExamenFisico_FR");

                    b.Property<string>("ExamenFisico_LaringoscopiaDificil");

                    b.Property<string>("ExamenFisico_Mallampati");

                    b.Property<string>("ExamenFisico_MovCervical");

                    b.Property<string>("ExamenFisico_Neurologico");

                    b.Property<string>("ExamenFisico_OtrosHallazgos");

                    b.Property<string>("ExamenFisico_PA");

                    b.Property<string>("ExamenFisico_Peso");

                    b.Property<string>("ExamenFisico_ProtesisDental");

                    b.Property<string>("ExamenFisico_RuidosCard");

                    b.Property<string>("ExamenFisico_Soplos");

                    b.Property<string>("ExamenFisico_T");

                    b.Property<string>("ExamenFisico_TestGanzouri");

                    b.Property<string>("ExamenFisico_ToraxPulmones");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("Hemorragicos_Descripcion");

                    b.Property<bool>("Hemorragicos_SiNo");

                    b.Property<string>("HipertensionArterial_Descripcion");

                    b.Property<bool>("HipertensionArterial_SiNo");

                    b.Property<string>("HistoriaClinica");

                    b.Property<int>("IdAtencion");

                    b.Property<int>("IdEstado");

                    b.Property<int>("IdMedico");

                    b.Property<int>("IdPaciente");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("LaboratorioImagenImagen_HbHcto");

                    b.Property<string>("LaboratorioImagen_Crea");

                    b.Property<DateTime?>("LaboratorioImagen_FechaExamen1");

                    b.Property<DateTime?>("LaboratorioImagen_FechaExamen2");

                    b.Property<DateTime?>("LaboratorioImagen_FechaExamen3");

                    b.Property<DateTime?>("LaboratorioImagen_FechaExamen4");

                    b.Property<string>("LaboratorioImagen_Glicemia");

                    b.Property<string>("LaboratorioImagen_Otros");

                    b.Property<string>("LaboratorioImagen_Plaquetas");

                    b.Property<string>("LaboratorioImagen_RxTorax");

                    b.Property<string>("LaboratorioImagen_TC");

                    b.Property<string>("LaboratorioImagen_TS");

                    b.Property<string>("LaboratorioImagen_Urea");

                    b.Property<string>("Medico");

                    b.Property<string>("OjoProcedimiento");

                    b.Property<string>("OtrosAntecedentes");

                    b.Property<string>("OtrosAntecedentes_Descripcion");

                    b.Property<string>("Paciente");

                    b.Property<string>("PlanAnestesico");

                    b.Property<string>("PlanAnestesico_Otros");

                    b.Property<string>("Procedimiento");

                    b.Property<string>("RAMs_Descripcion");

                    b.Property<bool>("RAMs_SiNo");

                    b.Property<string>("Servicio");

                    b.Property<string>("Sexo");

                    b.Property<string>("TipoAtencion");

                    b.HasKey("Id");

                    b.ToTable("EvaluacionPreAnestesica");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Aplicacion", b =>
                {
                    b.Property<int>("IdAplicacion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("IdAplicacion");

                    b.ToTable("Aplicacion");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Archivo", b =>
                {
                    b.Property<int>("IdArchivo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdEspecialidad");

                    b.Property<int>("IdServicio");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NroDocumento");

                    b.Property<string>("Ruta")
                        .IsRequired();

                    b.Property<string>("RutaCompleta")
                        .IsRequired();

                    b.Property<string>("TipoArchivo")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("IdArchivo");

                    b.ToTable("Archivo");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AtencionCE.AtencionCE", b =>
                {
                    b.Property<int>("IdAtencionCE")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Antecedentes");

                    b.Property<string>("AvConAEOD");

                    b.Property<string>("AvConAEOI");

                    b.Property<string>("AvConCorreccionOD");

                    b.Property<string>("AvConCorreccionOI");

                    b.Property<string>("AvSinCorreccionOD");

                    b.Property<string>("AvSinCorreccionOI");

                    b.Property<string>("ConjuntivaOD");

                    b.Property<string>("ConjuntivaOI");

                    b.Property<string>("CorneaOD");

                    b.Property<string>("CorneaOI");

                    b.Property<string>("CristalinoOD");

                    b.Property<string>("CristalinoOI");

                    b.Property<string>("DesarrolloCronologico");

                    b.Property<string>("Fc");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<string>("Fr");

                    b.Property<int>("IdAtencionGalenos");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("IdUsuarioRegistro");

                    b.Property<byte[]>("ImagenOjos");

                    b.Property<string>("MaculaOD");

                    b.Property<string>("MaculaOI");

                    b.Property<string>("MedidasGenerales");

                    b.Property<string>("MotivoConsulta");

                    b.Property<string>("NervioOpticoOD");

                    b.Property<string>("NervioOpticoOI");

                    b.Property<string>("Observaciones");

                    b.Property<string>("Pa");

                    b.Property<string>("ParpadoOD");

                    b.Property<string>("ParpadoOI");

                    b.Property<string>("PioOD");

                    b.Property<string>("PioOI");

                    b.Property<string>("PlanDeTrabajo");

                    b.Property<DateTime?>("ProximaCita");

                    b.Property<string>("PupilarOD");

                    b.Property<string>("PupilarOI");

                    b.Property<string>("RetinaOD");

                    b.Property<string>("RetinaOI");

                    b.Property<string>("SatO2");

                    b.Property<string>("T");

                    b.Property<string>("TiempoEnfermedad");

                    b.Property<string>("VitreoOD");

                    b.Property<string>("VitreoOI");

                    b.HasKey("IdAtencionCE");

                    b.ToTable("AtencionCE");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AtencionCE.Bifocal", b =>
                {
                    b.Property<int>("IdBifocal")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdBifocal");

                    b.ToTable("Bifocal");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AtencionCE.Especificaciones", b =>
                {
                    b.Property<int>("IdEspecificacion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdEspecificacion");

                    b.ToTable("Especificaciones");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AtencionCE.IngresoPacienteINO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acompaniante");

                    b.Property<string>("Departamento");

                    b.Property<string>("Distrito");

                    b.Property<string>("DocumentoPaciente");

                    b.Property<int?>("Edad");

                    b.Property<bool>("EsAcompaniante");

                    b.Property<bool>("EsExtranjero");

                    b.Property<bool>("EsTrabajador");

                    b.Property<DateTime>("FechaIngreso");

                    b.Property<DateTime?>("FechaNacimiento");

                    b.Property<DateTime?>("FechaSalida");

                    b.Property<int>("IdCita");

                    b.Property<int>("IdPaciente");

                    b.Property<int?>("IdUsuarioModifica");

                    b.Property<int>("IdUsuarioRegistro");

                    b.Property<string>("NroDocumento");

                    b.Property<string>("Paciente");

                    b.Property<string>("Provincia");

                    b.Property<string>("PuertaIngreso");

                    b.Property<string>("PuertaSalida");

                    b.Property<string>("Sexo");

                    b.HasKey("Id");

                    b.ToTable("IngresoPacienteINO");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AtencionCE.Material", b =>
                {
                    b.Property<int>("IdMaterial")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdMaterial");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AtencionCE.RecetaRefraccionCE", b =>
                {
                    b.Property<int>("IdRecetaRefraccion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdicionalMas");

                    b.Property<bool>("AdicionalMenos");

                    b.Property<string>("CCilindroOD")
                        .HasMaxLength(50);

                    b.Property<string>("CCilindroOI")
                        .HasMaxLength(50);

                    b.Property<string>("CEjeOD")
                        .HasMaxLength(50);

                    b.Property<string>("CEjeOI")
                        .HasMaxLength(50);

                    b.Property<string>("CEsferaOD")
                        .HasMaxLength(50);

                    b.Property<string>("CEsferaOI")
                        .HasMaxLength(50);

                    b.Property<string>("CSignoOD1")
                        .HasMaxLength(2);

                    b.Property<string>("CSignoOD2")
                        .HasMaxLength(2);

                    b.Property<string>("CSignoOI1")
                        .HasMaxLength(2);

                    b.Property<string>("CSignoOI2")
                        .HasMaxLength(2);

                    b.Property<string>("Cdip")
                        .HasMaxLength(100);

                    b.Property<string>("Cprisma")
                        .HasMaxLength(100);

                    b.Property<string>("DxOD")
                        .HasMaxLength(200);

                    b.Property<string>("DxOI")
                        .HasMaxLength(200);

                    b.Property<bool>("EstaImpreso");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<int?>("IdBifocal");

                    b.Property<int>("IdCita");

                    b.Property<int?>("IdEspecificacion1");

                    b.Property<int?>("IdEspecificacion2");

                    b.Property<int?>("IdEspecificacion3");

                    b.Property<int?>("IdEspecificacion4");

                    b.Property<int?>("IdEspecificacion5");

                    b.Property<int?>("IdMaterial");

                    b.Property<string>("LCilindroOD")
                        .HasMaxLength(50);

                    b.Property<string>("LCilindroOI")
                        .HasMaxLength(50);

                    b.Property<string>("LEjeOD")
                        .HasMaxLength(50);

                    b.Property<string>("LEjeOI")
                        .HasMaxLength(50);

                    b.Property<string>("LEsferaOD")
                        .HasMaxLength(50);

                    b.Property<string>("LEsferaOI")
                        .HasMaxLength(50);

                    b.Property<string>("LSignoOD1")
                        .HasMaxLength(2);

                    b.Property<string>("LSignoOD2")
                        .HasMaxLength(2);

                    b.Property<string>("LSignoOI1")
                        .HasMaxLength(2);

                    b.Property<string>("LSignoOI2")
                        .HasMaxLength(2);

                    b.Property<string>("Ldip")
                        .HasMaxLength(100);

                    b.Property<string>("Lprisma")
                        .HasMaxLength(100);

                    b.Property<string>("NroDocumento")
                        .HasMaxLength(20);

                    b.Property<string>("Paciente")
                        .HasMaxLength(250);

                    b.HasKey("IdRecetaRefraccion");

                    b.ToTable("RecetaRefraccionCE");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AtencionCE.ReprogramacionMedica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaReprogramacion");

                    b.Property<int>("IdMedico");

                    b.Property<int>("IdUsuario");

                    b.Property<string>("Medico");

                    b.Property<string>("Servicio");

                    b.HasKey("Id");

                    b.ToTable("ReprogramacionMedica");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AtencionTrabajador", b =>
                {
                    b.Property<int>("IdAtencionTrabajador")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CantidadDias");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Motivo");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("Peso");

                    b.Property<string>("Presion")
                        .HasMaxLength(50);

                    b.Property<int?>("Pulso");

                    b.Property<int?>("Talla");

                    b.Property<int?>("Temperatura");

                    b.Property<string>("TipoAtencion")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdAtencionTrabajador");

                    b.ToTable("AtencionTrabajador");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AtencionTrabajador_Diagnostico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdAtencionTrabajador");

                    b.Property<int>("IdDiagnostico");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("TipoDiagnostico")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("IdAtencionTrabajador");

                    b.ToTable("AtencionTrabajador_Diagnostico");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Auditoria", b =>
                {
                    b.Property<int>("IdAuditoria")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accion")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("IdUsuario");

                    b.Property<string>("IpLogueo")
                        .HasMaxLength(50);

                    b.Property<string>("NombreTabla")
                        .HasMaxLength(200);

                    b.Property<string>("ValoresAntiguos");

                    b.Property<string>("ValoresNuevos");

                    b.HasKey("IdAuditoria");

                    b.ToTable("Auditoria");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.CitasWeb.CitaWeb", b =>
                {
                    b.Property<int>("IdCita")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion");

                    b.Property<bool?>("EsCitaAdicional");

                    b.Property<string>("Especialidad")
                        .IsRequired();

                    b.Property<DateTime>("Fecha");

                    b.Property<DateTime?>("FechaEliminacionCita");

                    b.Property<DateTime?>("FechaPago");

                    b.Property<DateTime?>("FechaRechazoVoucher");

                    b.Property<DateTime>("FechaSolicitud");

                    b.Property<DateTime?>("FechaValidacionVoucher");

                    b.Property<string>("HoraFin")
                        .IsRequired();

                    b.Property<string>("HoraInicio")
                        .IsRequired();

                    b.Property<string>("HoraSolicitud");

                    b.Property<int>("IdAtencionGalenos");

                    b.Property<int>("IdCuentaAtencion");

                    b.Property<int>("IdEspecialidad");

                    b.Property<int>("IdEstado");

                    b.Property<int>("IdEstadoCita");

                    b.Property<int>("IdMedico");

                    b.Property<int>("IdPaciente");

                    b.Property<int?>("IdProducto");

                    b.Property<int>("IdProgramacion");

                    b.Property<int>("IdServicio");

                    b.Property<int?>("IdUsuarioElimina");

                    b.Property<int?>("IdUsuarioRechazoVoucher");

                    b.Property<int?>("IdUsuarioValidaVoucher");

                    b.Property<string>("ImagenVoucher");

                    b.Property<string>("Medico")
                        .IsRequired();

                    b.Property<string>("MotivoRechazoVoucher");

                    b.Property<string>("NroDocumento");

                    b.Property<string>("Paciente")
                        .IsRequired();

                    b.Property<string>("RazonSocial");

                    b.Property<string>("Ruc");

                    b.Property<string>("Servicio")
                        .IsRequired();

                    b.Property<string>("TipoComprobante");

                    b.Property<string>("Voucher");

                    b.Property<bool?>("VoucherValido");

                    b.HasKey("IdCita");

                    b.ToTable("CitaWeb");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.CitasWeb.PacienteCitaWeb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaNacimiento");

                    b.Property<int>("IdDistritoDomicilio");

                    b.Property<int>("IdEstadoCivil");

                    b.Property<int>("IdGradoInstruccion");

                    b.Property<int>("IdPacienteGalenos");

                    b.Property<int>("IdRol");

                    b.Property<int>("IdSexo");

                    b.Property<int>("IdTipoDocumento");

                    b.Property<int>("IdTipoOcupacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("TelefonoMovil")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.ToTable("PacienteCitaWeb");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.CodigosRespuestaIndicadoresDesempeno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.HasKey("Id");

                    b.ToTable("CodigosRespuestaIndicadoresDesempeno");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", b =>
                {
                    b.Property<int>("IdAreaLaboratorio")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .HasMaxLength(5);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("IdAreaLaboratorio");

                    b.ToTable("AreaLaboratorio");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Comunes.CondicionTrabajo", b =>
                {
                    b.Property<int>("IdCondicionTrabajo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.HasKey("IdCondicionTrabajo");

                    b.ToTable("CondicionTrabajo");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Comunes.TipoDocumentoIdentidad", b =>
                {
                    b.Property<int>("IdTipoDocumentoIdentidad")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.HasKey("IdTipoDocumentoIdentidad");

                    b.ToTable("TipoDocumentoIdentidad");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Comunes.TipoEmpleado", b =>
                {
                    b.Property<int>("IdTipoEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.HasKey("IdTipoEmpleado");

                    b.ToTable("TipoEmpleado");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.ConsultaWeb.SolicitudCita", b =>
                {
                    b.Property<int>("IdSolicitudCita")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("CodProc");

                    b.Property<string>("CorreoElectronico")
                        .HasMaxLength(100);

                    b.Property<string>("DesProc");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("FechaAcepta");

                    b.Property<DateTime?>("FechaAtiende");

                    b.Property<DateTime?>("FechaCita");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaNacimiento");

                    b.Property<DateTime?>("FechaRecetaEmision");

                    b.Property<DateTime?>("FechaRecetaValidoHasta");

                    b.Property<DateTime?>("FechaRechaza");

                    b.Property<string>("HoraCita");

                    b.Property<int>("IdDepartamento");

                    b.Property<int>("IdDistrito");

                    b.Property<int>("IdEstado");

                    b.Property<int>("IdEstadoCivil");

                    b.Property<int>("IdMedico");

                    b.Property<int>("IdProvincia");

                    b.Property<int>("IdResidente");

                    b.Property<int>("IdSexo");

                    b.Property<int>("IdTipoDocumento");

                    b.Property<int>("IdUsuarioAcepta");

                    b.Property<int>("IdUsuarioAtiende");

                    b.Property<int>("IdUsuarioRechaza");

                    b.Property<string>("MotivoConsulta")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("MotivoRechazo");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SegundoNombre")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("TelefonoMovil")
                        .HasMaxLength(20);

                    b.Property<string>("TipoConsulta");

                    b.Property<string>("UrlCita");

                    b.Property<bool>("Zoom");

                    b.HasKey("IdSolicitudCita");

                    b.ToTable("SolicitudCita");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.ConsultaWeb.SolicitudReprogramacion", b =>
                {
                    b.Property<int>("IdSolicitud")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaReprogramacion");

                    b.Property<DateTime?>("FechaValidacion");

                    b.Property<int>("IdCuentaAtencion");

                    b.Property<int>("IdDepartamento");

                    b.Property<int>("IdDistrito");

                    b.Property<int>("IdEstado");

                    b.Property<int>("IdProvincia");

                    b.Property<int>("IdUsuarioReprograma");

                    b.Property<int>("IdUsuarioValida");

                    b.Property<string>("MotivoInasistencia")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime?>("NuevaFechaReprogramacion");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("TelefonoMovil")
                        .HasMaxLength(20);

                    b.HasKey("IdSolicitud");

                    b.ToTable("SolicitudReprogramacion");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.ConsultaWeb.SolicitudTeleconsulta", b =>
                {
                    b.Property<int>("IdSolicitud")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CorreoElectronico")
                        .HasMaxLength(100);

                    b.Property<string>("Especialidad")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("FechaAcepta");

                    b.Property<DateTime?>("FechaAtiende");

                    b.Property<DateTime>("FechaCita");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaReprogramacion");

                    b.Property<string>("FteFto");

                    b.Property<string>("HoraCita")
                        .HasMaxLength(8);

                    b.Property<int>("IdCita");

                    b.Property<int>("IdCuentaAtencion");

                    b.Property<int>("IdDepartamento");

                    b.Property<int>("IdEstado");

                    b.Property<int>("IdMedico");

                    b.Property<int>("IdPaciente");

                    b.Property<int?>("IdUsuarioAcepta");

                    b.Property<int?>("IdUsuarioAtiende");

                    b.Property<string>("Medico");

                    b.Property<string>("NroDocumento")
                        .HasMaxLength(20);

                    b.Property<string>("NroHistoriaClinica")
                        .HasMaxLength(20);

                    b.Property<string>("NuevoHoraCita");

                    b.Property<string>("Paciente");

                    b.Property<string>("TelefonoMovil")
                        .HasMaxLength(20);

                    b.Property<string>("Turno")
                        .HasMaxLength(20);

                    b.Property<string>("Url");

                    b.HasKey("IdSolicitud");

                    b.ToTable("SolicitudTeleconsulta");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.ConsultaWeb_ConsultaRapida.SolicitudConsultaRapida", b =>
                {
                    b.Property<int>("IdSolicitud")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("CorreoElectronico")
                        .HasMaxLength(100);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("FechaAcepta");

                    b.Property<DateTime?>("FechaCita");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaEmision");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaNacimiento");

                    b.Property<DateTime?>("FechaRechazo");

                    b.Property<string>("HoraCita");

                    b.Property<int>("IdDepartamento");

                    b.Property<int>("IdDistrito");

                    b.Property<int?>("IdEspecialidad");

                    b.Property<int>("IdEstado");

                    b.Property<int>("IdEstadoCivil");

                    b.Property<int?>("IdMedico");

                    b.Property<int>("IdProvincia");

                    b.Property<int>("IdSexo");

                    b.Property<int>("IdTipoDocumento");

                    b.Property<int>("IdUsuarioAcepta");

                    b.Property<int?>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int?>("IdUsuarioRechaza");

                    b.Property<string>("Medico");

                    b.Property<string>("MotivoConsulta")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("MotivoRechazo");

                    b.Property<string>("NombreEspecialidad");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("NumeroReferencia");

                    b.Property<string>("OrigenPaciente");

                    b.Property<string>("TelefonoMovil")
                        .HasMaxLength(20);

                    b.Property<int?>("TipoSeguro");

                    b.HasKey("IdSolicitud");

                    b.ToTable("SolicitudConsultaRapida");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Empleado", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("CodigoPlanilla")
                        .HasMaxLength(20);

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaNacimiento");

                    b.Property<DateTime?>("FechaPIN");

                    b.Property<int>("IdCondicionTrabajo");

                    b.Property<int>("IdTipoDocumento");

                    b.Property<int>("IdTipoEmpleado");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<bool>("LoginEstado");

                    b.Property<string>("LoginIp");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("RutaHuella");

                    b.Property<string>("RutaRostro");

                    b.Property<string>("SecurityPIN");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdEmpleado");

                    b.HasIndex("IdCondicionTrabajo")
                        .IsUnique();

                    b.HasIndex("IdTipoDocumento")
                        .IsUnique();

                    b.HasIndex("IdTipoEmpleado")
                        .IsUnique();

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.EscalafonDeLegajos", b =>
                {
                    b.Property<int>("IdEscalafonDeLegajos")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Seccion")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("IdEscalafonDeLegajos");

                    b.ToTable("EscalafonDeLegajos");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Evaluacion.EvaluacionParticipante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidoMaterno");

                    b.Property<string>("ApellidoPaterno");

                    b.Property<string>("CorreoElectronico");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaEmision");

                    b.Property<int>("IdEstado");

                    b.Property<string>("NivelAtencion");

                    b.Property<string>("Nombres");

                    b.Property<string>("NumeroDocumento");

                    b.Property<string>("Ocupacion");

                    b.Property<string>("Pais");

                    b.Property<string>("Region");

                    b.Property<string>("Sector");

                    b.Property<string>("TelefonoMovil");

                    b.Property<string>("TipoDocumento");

                    b.HasKey("Id");

                    b.ToTable("EvaluacionParticipante");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Evaluacion.EvaluacionParticipanteCertificado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Certificado1");

                    b.Property<bool>("Certificado2");

                    b.Property<bool>("Certificado3");

                    b.Property<bool>("Certificado4");

                    b.Property<bool>("Certificado5");

                    b.Property<string>("CorreoElectronico");

                    b.Property<DateTime>("FechaCertificado");

                    b.Property<DateTime>("FechaEnvio");

                    b.Property<int>("IdParticipante");

                    b.Property<string>("Modulo");

                    b.Property<string>("NumeroDocumento");

                    b.Property<string>("Participante");

                    b.HasKey("Id");

                    b.ToTable("EvaluacionParticipanteCertificado");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Evaluacion.EvaluacionPregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Pregunta")
                        .IsRequired();

                    b.Property<string>("Respuestas")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EvaluacionPregunta");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Evaluacion.EvaluacionResultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<int>("IdParticipante");

                    b.Property<int>("IdPregunta");

                    b.Property<string>("IdRespuesta");

                    b.Property<string>("IdRespuestaCorrecta");

                    b.Property<string>("Modulo");

                    b.Property<string>("Pregunta");

                    b.Property<string>("Respuesta");

                    b.Property<string>("RespuestaCorrecta");

                    b.HasKey("Id");

                    b.ToTable("EvaluacionResultado");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.EvaluacionesExamenes.EvaluacionExamen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgrandamientoManchaCiegaOD");

                    b.Property<string>("AgrandamientoManchaCiegaOI");

                    b.Property<string>("ComentariosOD");

                    b.Property<string>("ComentariosOI");

                    b.Property<string>("ConfiabilidadOD");

                    b.Property<string>("ConfiabilidadOI");

                    b.Property<string>("ContraccionGenODINF");

                    b.Property<string>("ContraccionGenODSUP");

                    b.Property<string>("ContraccionGenOIINF");

                    b.Property<string>("ContraccionGenOISUP");

                    b.Property<string>("ContraccionPerLocODINF");

                    b.Property<string>("ContraccionPerLocODSUP");

                    b.Property<string>("ContraccionPerLocOIINF");

                    b.Property<string>("ContraccionPerLocOISUP");

                    b.Property<string>("DefectoCampoVisualOD");

                    b.Property<string>("DefectoCampoVisualOI");

                    b.Property<string>("DepresionNoEspecOD");

                    b.Property<string>("DepresionNoEspecOI");

                    b.Property<string>("EscalonNasalODINF");

                    b.Property<string>("EscalonNasalODSUP");

                    b.Property<string>("EscalonNasalOIINF");

                    b.Property<string>("EscalonNasalOISUP");

                    b.Property<string>("EscotomaAreaArqODINF");

                    b.Property<string>("EscotomaAreaArqODSUP");

                    b.Property<string>("EscotomaAreaArqOIINF");

                    b.Property<string>("EscotomaAreaArqOISUP");

                    b.Property<string>("EscotomaCecocentralOD");

                    b.Property<string>("EscotomaCecocentralOI");

                    b.Property<string>("EscotomaCentralOD");

                    b.Property<string>("EscotomaCentralOI");

                    b.Property<string>("EscotomaParacentralODINF");

                    b.Property<string>("EscotomaParacentralODSUP");

                    b.Property<string>("EscotomaParacentralOIINF");

                    b.Property<string>("EscotomaParacentralOISUP");

                    b.Property<string>("EstimuloColor");

                    b.Property<string>("EstimuloNumero");

                    b.Property<string>("Estrategia");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("HemianopsiaBitemporalOD");

                    b.Property<string>("HemianopsiaBitemporalOI");

                    b.Property<string>("HemianopsiaHomonimaOD");

                    b.Property<string>("HemianopsiaHomonimaOI");

                    b.Property<int>("IdAtencion");

                    b.Property<int?>("IdEstado");

                    b.Property<int>("IdMedico");

                    b.Property<int>("IdPaciente");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("IntensidadGlobalOD");

                    b.Property<string>("IntensidadGlobalOI");

                    b.Property<string>("Medico")
                        .IsRequired();

                    b.Property<string>("OtrosDefectosOD");

                    b.Property<string>("OtrosDefectosOI");

                    b.Property<string>("Paciente")
                        .IsRequired();

                    b.Property<string>("Programa");

                    b.Property<string>("TipoEvaluacion")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EvaluacionExamen");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.CalibracionDeficiente", b =>
                {
                    b.Property<int>("IdCalibracionDeficiente")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<bool>("EstaCalibrado");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("NumeroMes");

                    b.Property<string>("Observaciones");

                    b.Property<string>("Origen");

                    b.HasKey("IdCalibracionDeficiente");

                    b.HasIndex("IdAreaLaboratorio")
                        .IsUnique();

                    b.ToTable("CalibracionDeficiente");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.EmpleoReactivo", b =>
                {
                    b.Property<int>("IdEmpleoReactivo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("NumeroMes");

                    b.Property<string>("Origen");

                    b.Property<int>("TotalDeReactivos");

                    b.Property<int>("Vencidos");

                    b.HasKey("IdEmpleoReactivo");

                    b.HasIndex("IdAreaLaboratorio")
                        .IsUnique();

                    b.ToTable("EmpleoReactivo");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.EquipoMalCalibrado", b =>
                {
                    b.Property<int>("IdEquipoMalCalibrado")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("Inadecuados");

                    b.Property<int>("NumeroMes");

                    b.Property<string>("Origen");

                    b.Property<int>("TotalDeEquipos");

                    b.HasKey("IdEquipoMalCalibrado");

                    b.HasIndex("IdAreaLaboratorio")
                        .IsUnique();

                    b.ToTable("EquipoMalCalibrado");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.EquipoUPS", b =>
                {
                    b.Property<int>("IdEquipoUPS")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("NumeroMes");

                    b.Property<string>("Observaciones");

                    b.Property<string>("Origen");

                    b.Property<bool>("TieneUPS");

                    b.HasKey("IdEquipoUPS");

                    b.HasIndex("IdAreaLaboratorio")
                        .IsUnique();

                    b.ToTable("EquipoUPS");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.IncidentesPacientes", b =>
                {
                    b.Property<int>("IdIncidentesPacientes")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Incidentes");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Origen");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("IdIncidentesPacientes");

                    b.ToTable("IncidentesPacientes");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.IncumplimientoAnalisis", b =>
                {
                    b.Property<int>("IdIncumplimientoAnalisis")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AnaIFI");

                    b.Property<bool>("BacterianoAntibiograma");

                    b.Property<bool>("ElisaHIV");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<bool>("FtaAbsorcion");

                    b.Property<bool>("Giemsa");

                    b.Property<bool>("Gram");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<bool>("Micotico");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Origen");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Pas");

                    b.Property<bool>("ToxoplasmaIggIgm");

                    b.HasKey("IdIncumplimientoAnalisis");

                    b.ToTable("IncumplimientoAnalisis");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.MaterialNoCalibrado", b =>
                {
                    b.Property<int>("IdMaterialNoCalibrado")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calibrado");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("Inoperativo");

                    b.Property<int>("NoCalibrado");

                    b.Property<int>("NumeroMes");

                    b.Property<string>("Origen");

                    b.Property<int>("Total");

                    b.HasKey("IdMaterialNoCalibrado");

                    b.HasIndex("IdAreaLaboratorio")
                        .IsUnique();

                    b.ToTable("MaterialNoCalibrado");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.MuestraHemolizadaLipemica", b =>
                {
                    b.Property<int>("IdMuestraHemolizadaLipemica")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<int>("NumeroMes");

                    b.Property<string>("Origen");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("TipoPrueba")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("IdMuestraHemolizadaLipemica");

                    b.HasIndex("IdAreaLaboratorio")
                        .IsUnique();

                    b.ToTable("MuestraHemolizadaLipemica");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.PacienteSinResultado", b =>
                {
                    b.Property<int>("IdPacienteSinResultado")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<bool>("MuestraNoTomada");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Origen");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("PruebaNoRegistrada");

                    b.Property<bool>("ResultadoNoImpreso");

                    b.Property<bool>("ResultadoNoIngresado");

                    b.Property<bool>("ResultadoNoRegistrado");

                    b.HasKey("IdPacienteSinResultado");

                    b.ToTable("PacienteSinResultado");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.PocoFrecuente", b =>
                {
                    b.Property<int>("IdPocoFrecuente")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CuadernoPaciente");

                    b.Property<bool>("CuadernoSistema");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdPrueba");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<bool>("LaminaCuaderno");

                    b.Property<string>("NombrePrueba")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("NumeroMes");

                    b.Property<string>("Origen");

                    b.Property<bool>("SistemaCuaderno");

                    b.Property<int>("Total");

                    b.HasKey("IdPocoFrecuente");

                    b.HasIndex("IdAreaLaboratorio")
                        .IsUnique();

                    b.ToTable("PocoFrecuente");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.PruebasNoRealizadas", b =>
                {
                    b.Property<int>("IdPruebasNoRealizadas")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Amebas");

                    b.Property<bool>("Anca");

                    b.Property<bool>("AntiCpp");

                    b.Property<bool>("AntiDna");

                    b.Property<bool>("AntifenosFebriles");

                    b.Property<bool>("BacterianoAntibiogramaPP");

                    b.Property<bool>("BartonellaIgg");

                    b.Property<bool>("BartonellaIggIgm");

                    b.Property<bool>("BkEsputo");

                    b.Property<bool>("Chlamydia");

                    b.Property<string>("Comentario");

                    b.Property<bool>("Cortisol");

                    b.Property<bool>("ElisaToxoplasma");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<bool>("GiemsaPP");

                    b.Property<bool>("GramPP");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("HlaB27");

                    b.Property<bool>("Htlv");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<bool>("Kinyoun");

                    b.Property<bool>("Mercaptoetanol");

                    b.Property<bool>("MicoticoPP");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Origen");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("Parasitologico");

                    b.Property<bool>("PasPP");

                    b.Property<bool>("PerfilTiroideo");

                    b.Property<bool>("Pestana");

                    b.Property<bool>("Ppd");

                    b.HasKey("IdPruebasNoRealizadas");

                    b.ToTable("PruebasNoRealizadas");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.RecoleccionMuestra", b =>
                {
                    b.Property<int>("IdRecoleccionMuestra")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comentario");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<bool>("MuestrasMalRotuladas");

                    b.Property<bool>("MuestrasPerdidas");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Origen");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("RecoleccionInapropiada");

                    b.HasKey("IdRecoleccionMuestra");

                    b.ToTable("RecoleccionMuestra");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.RendimientoHoraTrabajador", b =>
                {
                    b.Property<int>("IdRendimientoHoraTrabajador")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<int>("ExamenesProcesados");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("Horas");

                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("NumeroMes");

                    b.Property<int>("NumeroTrabajadores");

                    b.Property<string>("Origen");

                    b.HasKey("IdRendimientoHoraTrabajador");

                    b.HasIndex("IdAreaLaboratorio")
                        .IsUnique();

                    b.ToTable("RendimientoHoraTrabajador");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.SolicitudDatosIncompletos", b =>
                {
                    b.Property<int>("IdSolicitudDatosIncompletos")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatoMedicoSolicitanteIncompleto");

                    b.Property<string>("DatoMuestraIncompleto");

                    b.Property<string>("DatoPacienteIncompleto");

                    b.Property<bool>("EsActivo");

                    b.Property<bool>("FaltaDatos");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<bool>("MovimientoIncorrecto");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Origen");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("SinMovimiento");

                    b.HasKey("IdSolicitudDatosIncompletos");

                    b.ToTable("SolicitudDatosIncompletos");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.SueroMalReferenciado", b =>
                {
                    b.Property<int>("IdSueroMalReferenciado")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("NumeroMes");

                    b.Property<string>("Observaciones");

                    b.Property<string>("Origen");

                    b.Property<bool>("TieneReferencia");

                    b.HasKey("IdSueroMalReferenciado");

                    b.HasIndex("IdAreaLaboratorio")
                        .IsUnique();

                    b.ToTable("SueroMalReferenciado");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.TranscripcionErronea", b =>
                {
                    b.Property<int>("IdTranscripcionErronea")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Erroneo");

                    b.Property<string>("ErrorDatoMuestra");

                    b.Property<string>("ErrorDatoPaciente");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<bool>("MovimientoIncorrecto");

                    b.Property<bool>("NoCobrado");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Origen");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("SinMovimiento");

                    b.HasKey("IdTranscripcionErronea");

                    b.ToTable("TranscripcionErronea");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.TranscripcionErroneaInoportuna", b =>
                {
                    b.Property<int>("IdTranscripcionErroneaInoportuna")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comentario");

                    b.Property<bool>("CuadernoOrden");

                    b.Property<bool>("EquipoCuaderno");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<bool>("Inoportuna");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<bool>("OrdenSistema");

                    b.Property<string>("Origen");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("IdTranscripcionErroneaInoportuna");

                    b.HasIndex("IdAreaLaboratorio")
                        .IsUnique();

                    b.ToTable("TranscripcionErroneaInoportuna");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.VenopunturasFallidas", b =>
                {
                    b.Property<int>("IdVenopunturasFallidas")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comentario");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Origen");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("PacienteConPatologiaSubyacente");

                    b.Property<bool>("PacientesAdultosMayoresONinos");

                    b.Property<bool>("VenasDificiles");

                    b.HasKey("IdVenopunturasFallidas");

                    b.ToTable("VenopunturasFallidas");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Modulo", b =>
                {
                    b.Property<int>("IdModulo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Orden");

                    b.HasKey("IdModulo");

                    b.ToTable("Modulo");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.AplicacionEmpleado", b =>
                {
                    b.Property<int>("IdAplicacion");

                    b.Property<int>("IdEmpleado");

                    b.HasKey("IdAplicacion", "IdEmpleado");

                    b.HasIndex("IdEmpleado");

                    b.ToTable("AplicacionEmpleado");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.EmpleadoRol", b =>
                {
                    b.Property<int>("IdEmpleado");

                    b.Property<int>("IdRol");

                    b.HasKey("IdEmpleado", "IdRol");

                    b.HasIndex("IdRol");

                    b.ToTable("UsuarioRol");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.OrdenesMedicasCodigosOpcionesOrdenMedica", b =>
                {
                    b.Property<int>("IdOpcionOrdenMedica");

                    b.Property<int>("IdOrdenesMedicasCodigos");

                    b.HasKey("IdOpcionOrdenMedica", "IdOrdenesMedicasCodigos");

                    b.HasIndex("IdOrdenesMedicasCodigos");

                    b.ToTable("OrdenesMedicasCodigos_OpcionesOrdenMedica");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.SolicitudCitaDiagnostico", b =>
                {
                    b.Property<int>("IdSolicitudDiagnostico")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoCIE10");

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<int>("IdDiagnostico");

                    b.Property<int>("IdSolicitudCita");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<string>("Ojo");

                    b.Property<string>("TipoDX");

                    b.HasKey("IdSolicitudDiagnostico");

                    b.ToTable("SolicitudCitaDiagnostico");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.SolicitudCitaMedicamento", b =>
                {
                    b.Property<int>("IdSolicitudMedicamento")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<string>("ForFarm");

                    b.Property<int>("IdMedicamento");

                    b.Property<int>("IdSolicitudCita");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<string>("Indicacion");

                    b.Property<string>("Nombre");

                    b.Property<string>("Ojo");

                    b.HasKey("IdSolicitudMedicamento");

                    b.ToTable("SolicitudCitaMedicamento");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.SubModuloAreaLaboratorio", b =>
                {
                    b.Property<int>("IdAreaLaboratorio");

                    b.Property<int>("IdSubModulo");

                    b.HasKey("IdAreaLaboratorio", "IdSubModulo");

                    b.HasIndex("IdSubModulo");

                    b.ToTable("SubModulo_AreaLaboratorio");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.SubModuloReporte", b =>
                {
                    b.Property<int>("IdSubModulo");

                    b.Property<int>("IdReporte");

                    b.HasKey("IdSubModulo", "IdReporte");

                    b.HasIndex("IdReporte");

                    b.ToTable("SubModulo_Reporte");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.NervioOptico.NervioOptico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaAnillo_OD");

                    b.Property<string>("AreaAnillo_OI");

                    b.Property<string>("Comentarios");

                    b.Property<string>("Confiabilidad_OD");

                    b.Property<string>("Confiabilidad_OI");

                    b.Property<string>("DiagnosticoPreoperatorio");

                    b.Property<string>("Edad");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("FibrasNerviosas_OD");

                    b.Property<string>("FibrasNerviosas_OI");

                    b.Property<string>("HistoriaClinica");

                    b.Property<int>("IdAtencion");

                    b.Property<int>("IdEstado");

                    b.Property<int>("IdMedico");

                    b.Property<int>("IdPaciente");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Medico");

                    b.Property<string>("Paciente");

                    b.Property<string>("Procedimiento");

                    b.Property<string>("PromedioTotal_OD");

                    b.Property<string>("PromedioTotal_OI");

                    b.Property<string>("RelacionCopia_OD");

                    b.Property<string>("RelacionCopia_OI");

                    b.HasKey("Id");

                    b.ToTable("NervioOptico");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.OpcionesOrdenMedica", b =>
                {
                    b.Property<int>("IdOpcionOrdenMedica")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.HasKey("IdOpcionOrdenMedica");

                    b.ToTable("OpcionesOrdenMedica");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.OrdenesMedicas", b =>
                {
                    b.Property<int>("IdOrdenMedica")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cmp")
                        .HasMaxLength(20);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("Fecha");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdAtencion");

                    b.Property<int>("IdEspecialidad");

                    b.Property<int>("IdTipoAnestesia");

                    b.Property<int>("IdTipoOrdenMedica");

                    b.Property<int>("IdTipoUsuario");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Medico")
                        .HasMaxLength(100);

                    b.Property<string>("NombreEspecialidad")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Rne")
                        .HasMaxLength(20);

                    b.Property<string>("TiempoCita")
                        .HasMaxLength(20);

                    b.HasKey("IdOrdenMedica");

                    b.HasIndex("IdTipoOrdenMedica");

                    b.ToTable("OrdenesMedicas");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.OrdenesMedicasCodigos", b =>
                {
                    b.Property<int>("IdOrdenesMedicasCodigos")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdOrdenMedica");

                    b.Property<int>("IdProcedimiento");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.HasKey("IdOrdenesMedicasCodigos");

                    b.HasIndex("IdOrdenMedica");

                    b.HasIndex("IdProcedimiento")
                        .IsUnique();

                    b.ToTable("OrdenesMedicasCodigos");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.TipoOrdenMedica", b =>
                {
                    b.Property<int>("IdTipoOrdenMedica")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdEspecialidad");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("TamanoFormulario");

                    b.Property<string>("TituloFormulario")
                        .HasMaxLength(100);

                    b.HasKey("IdTipoOrdenMedica");

                    b.ToTable("TipoOrdenMedica");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.TipoOrdenMedica_Procedimiento", b =>
                {
                    b.Property<int>("IdTipoOrdenMedica");

                    b.Property<int>("IdProcedimiento");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Orden");

                    b.HasKey("IdTipoOrdenMedica", "IdProcedimiento");

                    b.HasAlternateKey("Id");

                    b.HasIndex("IdProcedimiento");

                    b.ToTable("TipoOrdenMedica_Procedimiento");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.TipoOrdenMedicaRangos", b =>
                {
                    b.Property<int>("IdTipoOrdenMedicaRangos")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condicionales")
                        .HasMaxLength(500);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("Final");

                    b.Property<int>("IdTipoOrdenMedica");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("Inicial");

                    b.HasKey("IdTipoOrdenMedicaRangos");

                    b.HasIndex("IdTipoOrdenMedica");

                    b.ToTable("TipoOrdenMedicaRangos");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Procedimiento", b =>
                {
                    b.Property<int>("IdProcedimiento")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.Property<string>("DescripcionCorta")
                        .IsRequired();

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdEspecialidad");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.HasKey("IdProcedimiento");

                    b.ToTable("Procedimiento");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.RecetaMedica.Medicamento", b =>
                {
                    b.Property<int>("IdMedicamento")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<string>("ForFarm")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("IdRecetaMedica");

                    b.Property<string>("Indicacion")
                        .IsRequired();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Ojo")
                        .HasMaxLength(50);

                    b.Property<string>("ViaAdministracion")
                        .HasMaxLength(100);

                    b.HasKey("IdMedicamento");

                    b.HasIndex("IdRecetaMedica");

                    b.ToTable("Medicamento");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.RecetaMedica.RecetaMedicaEstandar", b =>
                {
                    b.Property<int>("IdRecetaMedica")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoCIE10")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Edad");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdAtencion");

                    b.Property<int>("IdTipoAtencion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Medico")
                        .HasMaxLength(100);

                    b.Property<string>("NroDocumento")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500);

                    b.Property<string>("OtrosMedicamentos")
                        .HasMaxLength(500);

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("ValidoHasta");

                    b.HasKey("IdRecetaMedica");

                    b.HasIndex("IdTipoAtencion")
                        .IsUnique();

                    b.ToTable("RecetaMedicaEstandar");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.RecetaMedica.TipoAtencion", b =>
                {
                    b.Property<int>("IdTipoAtencion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("IdTipoAtencion");

                    b.ToTable("TipoAtencion");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Reporte", b =>
                {
                    b.Property<int>("IdReporte")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ancho");

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NombreSSRS")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("TamanoDialog");

                    b.HasKey("IdReporte");

                    b.ToTable("Reporte");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("IdRol");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.RolSubModulo", b =>
                {
                    b.Property<int>("IdRol");

                    b.Property<int>("IdSubModulo");

                    b.Property<bool>("Agregar");

                    b.Property<bool>("Editar");

                    b.Property<bool>("Eliminar");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdRolSubModulo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<bool>("Ver");

                    b.HasKey("IdRol", "IdSubModulo");

                    b.HasAlternateKey("IdRolSubModulo");

                    b.HasIndex("IdSubModulo");

                    b.ToTable("RolSubModulo");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.SubModulo", b =>
                {
                    b.Property<int>("IdSubModulo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("IdModulo");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Orden");

                    b.Property<string>("Ruta")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("IdSubModulo");

                    b.HasIndex("IdModulo");

                    b.ToTable("SubModulo");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.TicketConsultaExterna", b =>
                {
                    b.Property<int>("IdTicketConsultaExterna")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AtencionEspecial");

                    b.Property<int>("Contador");

                    b.Property<int>("Edad");

                    b.Property<bool>("EsActivo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdEspecialidad");

                    b.Property<int>("IdImpresion");

                    b.Property<int>("IdImpresionRevision");

                    b.Property<int>("IdMedico");

                    b.Property<int>("IdPaciente");

                    b.Property<int>("IdTurno");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<string>("Medico")
                        .HasMaxLength(500);

                    b.Property<string>("NroBoletaFua")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(10);

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Prioridad");

                    b.HasKey("IdTicketConsultaExterna");

                    b.ToTable("TicketConsultaExterna");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.VacunacionCOVID19.ConsentimientoInformadoCOVID19", b =>
                {
                    b.Property<int>("IdCI")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool?>("DetCV19_P1");

                    b.Property<bool?>("DetCV19_P2");

                    b.Property<bool?>("DetCV19_P3");

                    b.Property<bool?>("DetPrevInm_P1");

                    b.Property<bool?>("DetPrevInm_P2");

                    b.Property<bool?>("DetPrevInm_P3");

                    b.Property<bool?>("DetPrevInm_P4");

                    b.Property<bool?>("DetPrevInm_P5");

                    b.Property<bool?>("DetPrevInm_P6");

                    b.Property<bool?>("DetPrevInm_P7");

                    b.Property<bool?>("DetPrevInm_P8");

                    b.Property<bool?>("DetPrevInm_P9");

                    b.Property<bool?>("ExpCI_P1");

                    b.Property<bool?>("ExpCI_P2");

                    b.Property<bool?>("ExpCI_P3");

                    b.Property<DateTime?>("FechaNacimiento");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<DateTime?>("FechaRegistroRevocatoria");

                    b.Property<int?>("IdMedico");

                    b.Property<int>("IdPersonalINO");

                    b.Property<int>("IdUsuarioRegistro");

                    b.Property<int?>("IdUsuarioRegistroRevocatoria");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PresionArterial");

                    b.Property<string>("Pulso");

                    b.Property<bool?>("RevCI_P1");

                    b.Property<bool?>("RevCI_P2");

                    b.Property<bool?>("RevCI_P3");

                    b.Property<string>("Saturacion");

                    b.Property<string>("Telefono")
                        .HasMaxLength(100);

                    b.Property<bool>("esTicket");

                    b.HasKey("IdCI");

                    b.ToTable("ConsentimientoInformadoCOVID19");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.VacunacionCOVID19.PersonalINO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actividad")
                        .HasMaxLength(100);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Categoria")
                        .HasMaxLength(100);

                    b.Property<string>("Direccion")
                        .HasMaxLength(250);

                    b.Property<bool>("Estado");

                    b.Property<DateTime?>("FechaNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Sexo")
                        .HasMaxLength(20);

                    b.Property<string>("Telefono")
                        .HasMaxLength(100);

                    b.Property<string>("Tipo")
                        .HasMaxLength(100);

                    b.Property<int>("TipoDocumento");

                    b.HasKey("Id");

                    b.ToTable("PersonalINO");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.VacunacionCOVID19.VacunacionCOVID19", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actividad")
                        .HasMaxLength(100);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime?>("FechaNacimiento");

                    b.Property<DateTime?>("FechaRegistroPrimeraDosisReaccionesAdversas");

                    b.Property<DateTime?>("FechaRegistroSegundaDosisReaccionesAdversas");

                    b.Property<DateTime?>("FechaRegistroTerceraDosisReaccionesAdversas");

                    b.Property<int>("IdPersonalINO");

                    b.Property<int>("IdUsuarioRegistroPrimeraDosis");

                    b.Property<int?>("IdUsuarioRegistroPrimeraDosisReaccionesAdversas");

                    b.Property<int?>("IdUsuarioRegistroSegundaDosis");

                    b.Property<int?>("IdUsuarioRegistroSegundaDosisReaccionesAdversas");

                    b.Property<int?>("IdUsuarioRegistroTerceraDosis");

                    b.Property<int?>("IdUsuarioRegistroTerceraDosisReaccionesAdversas");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("PrimeraDosisFecha");

                    b.Property<string>("RA1D_Diagnosticos");

                    b.Property<string>("RA1D_Observaciones");

                    b.Property<string>("RA1D_PresionArterial")
                        .HasMaxLength(50);

                    b.Property<string>("RA1D_Pulso")
                        .HasMaxLength(50);

                    b.Property<string>("RA1D_Saturacion")
                        .HasMaxLength(50);

                    b.Property<string>("RA2D_Diagnosticos");

                    b.Property<string>("RA2D_Observaciones");

                    b.Property<string>("RA2D_PresionArterial")
                        .HasMaxLength(50);

                    b.Property<string>("RA2D_Pulso")
                        .HasMaxLength(50);

                    b.Property<string>("RA2D_Saturacion")
                        .HasMaxLength(50);

                    b.Property<string>("RA3D_Diagnosticos");

                    b.Property<string>("RA3D_Observaciones");

                    b.Property<string>("RA3D_PresionArterial")
                        .HasMaxLength(50);

                    b.Property<string>("RA3D_Pulso")
                        .HasMaxLength(50);

                    b.Property<string>("RA3D_Saturacion")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("SegundaDosisFecha");

                    b.Property<string>("Telefono")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("TerceraDosisFecha");

                    b.HasKey("Id");

                    b.ToTable("VacunacionCOVID19");
                });

            modelBuilder.Entity("Ino_InvisionCore.Infraestructura.Models.ExamenAtendidoPorServicioModel", b =>
                {
                    b.Property<int>("IdExamen")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<int>("IdEspecialidad");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("TotalPacientes");

                    b.HasKey("IdExamen");

                    b.ToTable("ExamenAtendidoPorServicio");
                });

            modelBuilder.Entity("Ino_InvisionCore.Infraestructura.Models.ExamenNoInformadoPorServicioModel", b =>
                {
                    b.Property<int>("IdExamen")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EsActivo");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime>("FechaOcurrencia");

                    b.Property<int>("IdEspecialidad");

                    b.Property<int>("IdUsuarioCreacion");

                    b.Property<int?>("IdUsuarioModificacion");

                    b.Property<int>("TotalPacientes");

                    b.HasKey("IdExamen");

                    b.ToTable("ExamenNoInformadoPorServicio");
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.AtencionTrabajador_Diagnostico", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.AtencionTrabajador", "AtencionTrabajador")
                        .WithMany("AtencionTrabajador_Diagnosticos")
                        .HasForeignKey("IdAtencionTrabajador")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.CitasWeb.PacienteCitaWeb", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Rol", "Rol")
                        .WithMany("PacientesCitaWeb")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.Empleado", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.CondicionTrabajo", "CondicionTrabajo")
                        .WithOne("Empleado")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.Empleado", "IdCondicionTrabajo")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.TipoDocumentoIdentidad", "TipoDocumentoIdentidad")
                        .WithOne("Empleado")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.Empleado", "IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.TipoEmpleado", "TipoEmpleado")
                        .WithOne("Empleado")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.Empleado", "IdTipoEmpleado")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.CalibracionDeficiente", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithOne("CalibracionDeficiente")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.CalibracionDeficiente", "IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.EmpleoReactivo", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithOne("EmpleoReactivo")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.EmpleoReactivo", "IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.EquipoMalCalibrado", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithOne("EquipoMalCalibrado")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.EquipoMalCalibrado", "IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.EquipoUPS", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithOne("EquipoUPS")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.EquipoUPS", "IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.MaterialNoCalibrado", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithOne("MaterialNoCalibrado")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.MaterialNoCalibrado", "IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.MuestraHemolizadaLipemica", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithOne("MuestraHemolizadaLipemica")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.MuestraHemolizadaLipemica", "IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.PocoFrecuente", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithOne("PocoFrecuente")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.PocoFrecuente", "IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.RendimientoHoraTrabajador", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithOne("RendimientoHoraTrabajador")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.RendimientoHoraTrabajador", "IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.SueroMalReferenciado", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithOne("SueroMalReferenciado")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.SueroMalReferenciado", "IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.TranscripcionErroneaInoportuna", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithOne("TranscripcionErroneaInoportuna")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.LaboratorioInmunologico.TranscripcionErroneaInoportuna", "IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.AplicacionEmpleado", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Aplicacion", "Aplicacion")
                        .WithMany("AplicacionEmpleados")
                        .HasForeignKey("IdAplicacion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Empleado", "Empleado")
                        .WithMany("AplicacionEmpleados")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.EmpleadoRol", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Empleado", "Empleado")
                        .WithMany("EmpleadoRoles")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Rol", "Rol")
                        .WithMany("EmpleadoRoles")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.OrdenesMedicasCodigosOpcionesOrdenMedica", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.OpcionesOrdenMedica", "OpcionesOrdenMedica")
                        .WithMany("OrdenesMedicasCodigosOpcionesOrdenMedicas")
                        .HasForeignKey("IdOpcionOrdenMedica")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.OrdenesMedicasCodigos", "OrdenesMedicasCodigos")
                        .WithMany("OrdenesMedicasCodigosOpcionesOrdenMedicas")
                        .HasForeignKey("IdOrdenesMedicasCodigos")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.SubModuloAreaLaboratorio", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Comunes.AreaLaboratorio", "AreaLaboratorio")
                        .WithMany("SubModuloAreaLaboratorios")
                        .HasForeignKey("IdAreaLaboratorio")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.SubModulo", "SubModulo")
                        .WithMany("SubModuloAreaLaboratorios")
                        .HasForeignKey("IdSubModulo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.MuchosAMuchos.SubModuloReporte", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Reporte", "Reporte")
                        .WithMany("SubModuloReportes")
                        .HasForeignKey("IdReporte")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.SubModulo", "SubModulo")
                        .WithMany("SubModuloReportes")
                        .HasForeignKey("IdSubModulo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.OrdenesMedicas", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.TipoOrdenMedica", "TipoOrdenMedica")
                        .WithMany("OrdenesMedicas")
                        .HasForeignKey("IdTipoOrdenMedica")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.OrdenesMedicasCodigos", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.OrdenesMedicas", "OrdenesMedicas")
                        .WithMany("OrdenesMedicasCodigos")
                        .HasForeignKey("IdOrdenMedica")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Procedimiento", "Procedimiento")
                        .WithOne("OrdenesMedicasCodigos")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.OrdenesMedicasCodigos", "IdProcedimiento")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.TipoOrdenMedica_Procedimiento", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Procedimiento", "Procedimientos")
                        .WithMany("TipoOrdenMedica_Procedimientos")
                        .HasForeignKey("IdProcedimiento")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.TipoOrdenMedica", "TipoOrdenMedicas")
                        .WithMany("TipoOrdenMedica_Procedimientos")
                        .HasForeignKey("IdTipoOrdenMedica")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.TipoOrdenMedicaRangos", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.OrdenMedica.TipoOrdenMedica", "TipoOrdenMedica")
                        .WithMany("TipoOrdenMedicaRangos")
                        .HasForeignKey("IdTipoOrdenMedica")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.RecetaMedica.Medicamento", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.RecetaMedica.RecetaMedicaEstandar", "RecetaMedicaEstandar")
                        .WithMany("Medicamentos")
                        .HasForeignKey("IdRecetaMedica")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.RecetaMedica.RecetaMedicaEstandar", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.RecetaMedica.TipoAtencion", "TipoAtencion")
                        .WithOne("RecetaMedicaEstandar")
                        .HasForeignKey("Ino_InvisionCore.Dominio.Entidades.RecetaMedica.RecetaMedicaEstandar", "IdTipoAtencion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.RolSubModulo", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Rol", "Rol")
                        .WithMany("RolSubModulos")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.SubModulo", "SubModulo")
                        .WithMany("RolSubModulos")
                        .HasForeignKey("IdSubModulo")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Ino_InvisionCore.Dominio.Entidades.SubModulo", b =>
                {
                    b.HasOne("Ino_InvisionCore.Dominio.Entidades.Modulo", "Modulo")
                        .WithMany("SubModulos")
                        .HasForeignKey("IdModulo")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
